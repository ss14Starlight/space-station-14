using Content.Shared.Starlight.MHelp;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controllers;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Starlight.MHelp.UI;

[GenerateTypedNameReferences]
public sealed partial class MhelpPanel : BoxContainer
{
    public int Unread { get; private set; } = 0;
    public DateTime LastMessage { get; private set; } = DateTime.MinValue;
    private List<string> PeopleTyping { get; set; } = [];
    public event Action<string> OnInputTextChanged = delegate { };
    public event Action<string> OnMessageSend = delegate { };
    public event Action OnTicketClosed = delegate { };

    public MhelpPanel()
    {
        RobustXamlLoader.Load(this);

        OnVisibilityChanged += c =>
        {
            if (c.Visible)
                Unread = 0;
        };
        SenderLineEdit.OnTextEntered += Input_OnTextEntered;
        SenderLineEdit.OnTextChanged += Input_OnTextChanged;
        CloseTicket.OnPressed += _ => OnTicketClosed.Invoke();
        UpdateTypingIndicator();
    }

    private void Input_OnTextEntered(LineEdit.LineEditEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(args.Text))
            return;

        OnMessageSend.Invoke(args.Text);
        SenderLineEdit.Clear();
    }

    private void Input_OnTextChanged(LineEdit.LineEditEventArgs args)
    {
        OnInputTextChanged?.Invoke(args.Text);
    }

    public void ReceiveLine(SharedMentorSystem.MHelpTextMessage message)
    {
        if (!Visible)
            Unread++;
        CloseTicket.Visible = message.Ticket is not null && !message.TicketClosed;
        var formatted = new FormattedMessage(1);
        formatted.AddMarkupOrThrow(message.Text);
        LastMessage = message.CreateAt;
        TextOutput.AddMessage(formatted);
    }

    private void UpdateTypingIndicator()
    {
        var msg = new FormattedMessage();
        msg.PushColor(Color.LightGray);

        var text = PeopleTyping.Count == 0
            ? string.Empty
            : Loc.GetString("bwoink-system-typing-indicator",
                ("players", string.Join(", ", PeopleTyping)),
                ("count", PeopleTyping.Count));

        msg.AddText(text);
        msg.Pop();

        TypingIndicator.SetMessage(msg);
    }

    public void UpdatePlayerTyping(string name, bool typing)
    {
        if (typing)
        {
            if (PeopleTyping.Contains(name))
                return;

            PeopleTyping.Add(name);
            Timer.Spawn(TimeSpan.FromSeconds(10), () =>
            {
                if (Disposed)
                    return;

                PeopleTyping.Remove(name);
                UpdateTypingIndicator();
            });
        }
        else
        {
            PeopleTyping.Remove(name);
        }

        UpdateTypingIndicator();
    }

    [Obsolete]
    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

    internal void SetInputVisibility(bool v) => SenderLineEdit.Visible = v;
}
