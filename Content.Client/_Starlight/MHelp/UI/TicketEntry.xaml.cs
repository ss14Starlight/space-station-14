using Content.Client.Stylesheets;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Starlight.MHelp.UI;

[GenerateTypedNameReferences]
public sealed partial class TicketEntry : BoxContainer
{
    public TicketEntry() => RobustXamlLoader.Load(this);

    public event Action<Ticket>? OnPinStatusChanged;

    public void Setup(Ticket ticket)
    {
        Update(ticket);
        PlayerEntryPinButton.OnPressed += HandlePinButtonPressed(ticket);
    }

    private Action<BaseButton.ButtonEventArgs> HandlePinButtonPressed(Ticket ticket)
    {
        return args =>
        {
            ticket.IsPinned = !ticket.IsPinned;
            UpdatePinButtonTexture(ticket.IsPinned);
            OnPinStatusChanged?.Invoke(ticket);
        };
    }

    private void Update(Ticket ticket)
    {
        Label.Text = (ticket.IsClosed ? "(X) " : "") + ticket.Id.ToString();

        UpdatePinButtonTexture(ticket.IsPinned);
    }

    private void UpdatePinButtonTexture(bool isPinned)
    {
        if (isPinned)
        {
            PlayerEntryPinButton?.RemoveStyleClass(StyleNano.StyleClassPinButtonUnpinned);
            PlayerEntryPinButton?.AddStyleClass(StyleNano.StyleClassPinButtonPinned);
        }
        else
        {
            PlayerEntryPinButton?.RemoveStyleClass(StyleNano.StyleClassPinButtonPinned);
            PlayerEntryPinButton?.AddStyleClass(StyleNano.StyleClassPinButtonUnpinned);
        }
    }
}
