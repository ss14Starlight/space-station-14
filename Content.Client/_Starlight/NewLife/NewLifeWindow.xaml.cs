using Content.Client.LateJoin;
using System.Linq;
using System.Numerics;
using Content.Client.Lobby;
using Content.Client.Lobby.UI;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Controls;
using Content.Shared.Starlight.NewLife;
using Content.Shared.CCVar;
using Content.Shared.Ghost.Roles;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Linguini.Syntax.Ast;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Content.Client.GameTicking.Managers;
using Content.Client.CrewManifest;

namespace Content.Client.Starlight.NewLife;

[GenerateTypedNameReferences]
public sealed partial class NewLifeWindow : DefaultWindow
{
    private readonly IClientPreferencesManager _preferencesManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entManager = default!;

    [Dependency] private readonly IClientConsoleHost _consoleHost = default!;
    [Dependency] private readonly IConfigurationManager _configManager = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly JobRequirementsManager _jobRequirements = default!;

    public event Action<(NetEntity, string)> SelectedId;

    private readonly ClientGameTicker _gameTicker;
    private readonly SpriteSystem _sprites;

    private readonly Dictionary<NetEntity, Dictionary<string, List<JobButton>>> _jobButtons = new();
    private readonly Dictionary<NetEntity, Dictionary<string, BoxContainer>> _jobCategories = new();
    private readonly List<ScrollContainer> _jobLists = new();

    public event Action<int>? SelectCharacter;
    private HashSet<int> _usedSlots = [];
    public NewLifeWindow(IClientPreferencesManager preferencesManager)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _preferencesManager = preferencesManager;
        _sprites = _entitySystem.GetEntitySystem<SpriteSystem>();
        _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();
        if ( _gameTicker.StationNames.Count == 0)
            _gameTicker.NewLifeOpened();
        Title = Loc.GetString("late-join-gui-title");

        _jobRequirements.Updated += RebuildUI;

        SelectedId += x =>
        {
            var (station, jobId) = x;
            Logger.InfoS("latejoin", $"Late joining as ID: {jobId}");
            _consoleHost.ExecuteCommand($"joingame {CommandParsing.Escape(jobId)} {station}");
            Close();
        };

        _gameTicker.LobbyJobsAvailableUpdated += JobsAvailableUpdated;
        ReloadCharacterPickers();
        RebuildUI();
    }
    public void ReloadCharacterPickers(HashSet<int>? usedSlots = null)
    {
        if (usedSlots != null)
            _usedSlots = usedSlots;

        CharactersContainer.DisposeAllChildren();

        if (!_preferencesManager.ServerDataLoaded)
            return;

        var selectedSlot = _preferencesManager.Preferences?.SelectedCharacterIndex;

        foreach (var (slot, character) in _preferencesManager.Preferences!.Characters)
        {
            var characterPicker = new CharacterPicker(_entManager,
                _prototypeManager,
                character,
                slot == selectedSlot && !_usedSlots.Contains(slot),
                _usedSlots.Contains(slot));
            CharactersContainer.AddChild(characterPicker);

            if (!_usedSlots.Contains(slot))
                characterPicker.DefaultCursorShape = CursorShape.Hand;

            characterPicker.OnPressed += args =>
            {
                if (!_usedSlots.Contains(slot))
                    SelectCharacter?.Invoke(slot);
            };
        }
    }

    private void RebuildUI()
    {
        RolesContainer.RemoveAllChildren();
        _jobLists.Clear();
        _jobButtons.Clear();
        _jobCategories.Clear();

        if (!_gameTicker.DisallowedLateJoin && _gameTicker.StationNames.Count == 0)
        {
            _gameTicker.NewLifeOpened();
            Logger.Warning("No stations exist, nothing to display in late-join GUI");
        }

        foreach (var (id, name) in _gameTicker.StationNames)
        {
            var jobList = new BoxContainer
            {
                Orientation = LayoutOrientation.Vertical,
                Margin = new Thickness(0, 0, 5f, 0),
            };

            var collapseButton = new ContainerButton()
            {
                HorizontalAlignment = HAlignment.Right,
                ToggleMode = true,
                Children =
                    {
                        new TextureRect
                        {
                            StyleClasses = { OptionButton.StyleClassOptionTriangle },
                            Margin = new Thickness(8, 0),
                            HorizontalAlignment = HAlignment.Center,
                            VerticalAlignment = VAlignment.Center,
                        }
                    }
            };

            RolesContainer.AddChild(new StripeBack()
            {
                Children =
                    {
                        new PanelContainer()
                        {
                            Children =
                            {
                                new Label()
                                {
                                    StyleClasses = { "LabelBig" },
                                    Text = name,
                                    Align = Label.AlignMode.Center,
                                },
                                collapseButton
                            }
                        }
                    }
            });

            var jobListScroll = new ScrollContainer()
            {
                VerticalExpand = true,
                Children = { jobList },
                Visible = false,
            };

            if (_jobLists.Count == 0)
                jobListScroll.Visible = true;

            _jobLists.Add(jobListScroll);

            RolesContainer.AddChild(jobListScroll);

            collapseButton.OnToggled += _ =>
            {
                foreach (var section in _jobLists)
                {
                    section.Visible = false;
                }
                jobListScroll.Visible = true;
            };

            var firstCategory = true;
            var departments = _prototypeManager.EnumeratePrototypes<DepartmentPrototype>().ToArray();
            Array.Sort(departments, DepartmentUIComparer.Instance);

            _jobButtons[id] = new Dictionary<string, List<JobButton>>();

            foreach (var department in departments)
            {
                var departmentName = Loc.GetString($"department-{department.ID}");
                _jobCategories[id] = new Dictionary<string, BoxContainer>();
                var stationAvailable = _gameTicker.JobsAvailable[id];
                var jobsAvailable = new List<JobPrototype>();

                foreach (var jobId in department.Roles)
                {
                    if (!stationAvailable.ContainsKey(jobId))
                        continue;

                    jobsAvailable.Add(_prototypeManager.Index<JobPrototype>(jobId));
                }

                jobsAvailable.Sort(JobUIComparer.Instance);

                // Do not display departments with no jobs available.
                if (jobsAvailable.Count == 0)
                    continue;

                var category = new BoxContainer
                {
                    Orientation = LayoutOrientation.Vertical,
                    Name = department.ID,
                    ToolTip = Loc.GetString("late-join-gui-jobs-amount-in-department-tooltip",
                        ("departmentName", departmentName))
                };

                if (firstCategory)
                {
                    firstCategory = false;
                }
                else
                {
                    category.AddChild(new Control
                    {
                        MinSize = new Vector2(0, 23),
                    });
                }

                category.AddChild(new PanelContainer
                {
                    Children =
                        {
                            new Label
                            {
                                StyleClasses = { "LabelBig" },
                                Text = Loc.GetString("late-join-gui-department-jobs-label", ("departmentName", departmentName))
                            }
                        }
                });

                _jobCategories[id][department.ID] = category;
                jobList.AddChild(category);

                foreach (var prototype in jobsAvailable)
                {
                    var value = stationAvailable[prototype.ID];

                    var jobLabel = new Label
                    {
                        Margin = new Thickness(5f, 0, 0, 0)
                    };

                    var jobButton = new JobButton(jobLabel, prototype.ID, prototype.LocalizedName, value);

                    var jobSelector = new BoxContainer
                    {
                        Orientation = LayoutOrientation.Horizontal,
                        HorizontalExpand = true
                    };

                    var icon = new TextureRect
                    {
                        TextureScale = new Vector2(2, 2),
                        VerticalAlignment = VAlignment.Center
                    };

                    var jobIcon = _prototypeManager.Index(prototype.Icon);
                    icon.Texture = _sprites.Frame0(jobIcon.Icon);
                    jobSelector.AddChild(icon);

                    jobSelector.AddChild(jobLabel);
                    jobButton.AddChild(jobSelector);
                    category.AddChild(jobButton);

                    jobButton.OnPressed += _ => SelectedId.Invoke((id, jobButton.JobId));

                    if (!_jobRequirements.IsAllowed(prototype, (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter, out var reason))
                    {
                        jobButton.Disabled = true;

                        if (!reason.IsEmpty)
                        {
                            var tooltip = new Tooltip();
                            tooltip.SetMessage(reason);
                            jobButton.TooltipSupplier = _ => tooltip;
                        }

                        jobSelector.AddChild(new TextureRect
                        {
                            TextureScale = new Vector2(0.4f, 0.4f),
                            Stretch = TextureRect.StretchMode.KeepCentered,
                            Texture = _sprites.Frame0(new SpriteSpecifier.Texture(new("/Textures/Interface/Nano/lock.svg.192dpi.png"))),
                            HorizontalExpand = true,
                            HorizontalAlignment = HAlignment.Right,
                        });
                    }
                    else if (value == 0)
                    {
                        jobButton.Disabled = true;
                    }

                    if (!_jobButtons[id].ContainsKey(prototype.ID))
                    {
                        _jobButtons[id][prototype.ID] = new List<JobButton>();
                    }

                    _jobButtons[id][prototype.ID].Add(jobButton);
                }
            }
        }
    }

    private void JobsAvailableUpdated(IReadOnlyDictionary<NetEntity, Dictionary<ProtoId<JobPrototype>, int?>> updatedJobs)
    {
        foreach (var stationEntries in updatedJobs)
        {
            if (_jobButtons.ContainsKey(stationEntries.Key))
            {
                var jobsAvailable = stationEntries.Value;

                var existingJobEntries = _jobButtons[stationEntries.Key];
                foreach (var existingJobEntry in existingJobEntries)
                {
                    if (jobsAvailable.ContainsKey(existingJobEntry.Key))
                    {
                        var updatedJobValue = jobsAvailable[existingJobEntry.Key];
                        foreach (var matchingJobButton in existingJobEntry.Value)
                        {
                            if (matchingJobButton.Amount != updatedJobValue)
                            {
                                matchingJobButton.RefreshLabel(updatedJobValue);
                                matchingJobButton.Disabled |= matchingJobButton.Amount == 0;
                            }
                        }
                    }
                }
            }
        }
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
        {
            _jobRequirements.Updated -= RebuildUI;
            _gameTicker.LobbyJobsAvailableUpdated -= JobsAvailableUpdated;
            _jobButtons.Clear();
            _jobCategories.Clear();
        }
    }
}
